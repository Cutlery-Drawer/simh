.. -*- coding: utf-8; mode: rst; tab-width: 4; truncate-lines: t; indent-tabs-mode: nil; truncate-lines: t; -*- vim:set et ts=4 ft=rst nowrap:

.. role:: html(raw)
   :format: html

.. |n|       replace:: :html:`<samp><var>n</var></samp>`
.. |ATTACH|  replace:: :html:`<samp>ATTACH</samp>`
.. |DEPOSIT| replace:: :html:`<samp>DEPOSIT</samp>`
.. |EXAMINE| replace:: :html:`<samp>EXAMINE</samp>`
.. |SET|     replace:: :html:`<samp>SET</samp>`
.. |SHOW|    replace:: :html:`<samp>SHOW</samp>`

*******************************
Burroughs B5500 simulator usage
*******************************
:Date: 2018-07-25
:Revision: $Format:%H$
:Copyright: See `LICENSE.txt <../LICENSE.txt>`_ for terms of use.

.. topic:: **Copyright notice**

   The following copyright notice applies to the SIMH source, binary, and documentation:

   .. include:: ../LICENSE.txt

.. sectnum:: :suffix: .
.. contents:: Table of Contents
   :backlinks: none
   :depth: 3
   :local:

Introduction
============
The Burroughs 5500 was a unique machine,
first introduced in 1961 as the B5000.
Later advanced to the B5500 (1964) adding disks,
and finally the B5700 (1971) adding solid state drum.
It was the first computer to use the stack as its only means of accessing data.
The machine used 48-bit numbers,
all of which were considered to be floating-point numbers.
A computer word could also be used to hold up to 8 6-bit characters.
All software for the machine was written in high-level languages,
mostly ALGOL or ALGOL derivatives.
FORTRAN and COBOL were also available for programming,
but the operating system and all the compilers were written in ALGOL.
There was a special version of ALGOL called EPSOL which allowed the generation of in-line instruction.
Programs written in EPSOL had to be run directly from the hardware as the compiler generated absolute code only.
One drawback to the machine was that all programs had to be developed in one language,
since linking was not part of the system.

The B5500 added a number of instructions to the B5000,
including ``LLL``, ``TUS``, ``FBS``.
These instructions were to improve the performance of the machine.
Also added was the ``XRT`` instruction,
which allowed for a subroutine to access the full PRT table.
The B5700 was basically an enhanced B5500 with core memory instead of drum for fast online storage.
MCP used the drum (and later Auxmem) as a cache for frequently-used segments.

Simulator files
===============
To compile the Burroughs B5500 simulator,
you must define ``USE_INT64`` as part of the compilation command-line.

+--------------+------------------+---------------------------------------+
| Subdirectory | File             | Contains                              |
+==============+==================+=======================================+
| ``B5500/``   | ``b5500_defs.h`` | Burroughs B5500 simulator definitions |
|              +------------------+---------------------------------------+
|              | ``b5500_cpu.c``  | B5500 CPU, channel, interface         |
|              +------------------+---------------------------------------+
|              | ``b5500_io.c``   | B5500 I/O channel                     |
|              +------------------+---------------------------------------+
|              | ``b5500_sys.c``  | B5500 system interface                |
|              +------------------+---------------------------------------+
|              | ``b5500_urec.c`` | B5500 unit record devices             |
|              +------------------+---------------------------------------+
|              | ``b5500_dk.c``   | B5470 disk controller                 |
|              +------------------+---------------------------------------+
|              | ``b5500_dr.c``   | B430 drum or B6500 memory module      |
|              +------------------+---------------------------------------+
|              | ``b5500_dtc.c``  | B249 terminal controller              |
|              +------------------+---------------------------------------+
|              | ``b5500_mt.c``   | B422/B423 magnetic tape controller    |
+--------------+------------------+---------------------------------------+

B5500 features
==============
The B5500 simulator is configured as follows:

=====================  ==================================
Device name(s)         Simulates
=====================  ==================================
|CPU|_                 B5500 CPU with 32KW of memory
|IO0|_\ ..\ |IO3|_     B5500 I/O controller
|MT0|_\ ..\ |MT16|_    B422/B423 magnetic tape controller
|CR0|_\ ..\ |CR1|_     B124 card reader
|CP|_                  B303 card punch
|LP|_                  B320 line printer
|DK0|_\ ..\ |DK1|_     B5470 disk controller
|ESU0|_\ ..\ |ESU20|_  B471 electronic storage unit
|DK|_                  B430 drum
|CON|_                 Supervisory printer
|DTC|_                 B249 terminal controller
=====================  ==================================

.. |CPU| replace:: :html:`<samp>CPU</samp>`
.. _CPU:

|CPU|
-----
The CPU options include setting memory size and CPU type.

===================================  ======================
:html:`<samp>SET CPU 4K</samp>`      Set memory to 4K
:html:`<samp>SET CPU 8K</samp>`      Set memory to 8K
:html:`<samp>SET CPU 12K</samp>`     Set memory to 12K
:html:`<samp>SET CPU 16K</samp>`     Set memory to 16K
:html:`<samp>SET CPU 20K</samp>`     Set memory to 20K
:html:`<samp>SET CPU 24K</samp>`     Set memory to 24K
:html:`<samp>SET CPU 28K</samp>`     Set memory to 28K
:html:`<samp>SET CPU 32K</samp>`     Set memory to 32K
:html:`<samp>SET CPU NOIDLE</samp>`  Disable Idle detection
:html:`<samp>SET CPU IDLE</samp>`    Enable Idle detection
===================================  ======================

The B5500 typically included a second CPU which could be used to handle non-I/O based computing.
To enable the second CPU::

    SET CPU1 ENABLE

This needs to be done before the system is booted,
otherwise it will not be detected.
Note the second CPU can be disabled laster and the system will continue to run with only one CPU.

CPU registers include the visible state of the processor as well as the control registers for the interrupt system.

.. |C|    replace:: :html:`<samp>C</samp>`
.. |L|    replace:: :html:`<samp>L</samp>`
.. |A|    replace:: :html:`<samp>A</samp>`
.. |B|    replace:: :html:`<samp>B</samp>`
.. |X|    replace:: :html:`<samp>X</samp>`
.. |GH|   replace:: :html:`<samp>GH</samp>`
.. |KY|   replace:: :html:`<samp>KY</samp>`
.. |MA|   replace:: :html:`<samp>MA</samp>`
.. |S|    replace:: :html:`<samp>S</samp>`
.. |F|    replace:: :html:`<samp>F</samp>`
.. |R|    replace:: :html:`<samp>R</samp>`
.. |P|    replace:: :html:`<samp>P</samp>`
.. |T|    replace:: :html:`<samp>T</samp>`
.. |Q|    replace:: :html:`<samp>Q</samp>`
.. |AROF| replace:: :html:`<samp>AROF</samp>`
.. |BROF| replace:: :html:`<samp>BROF</samp>`
.. |PROF| replace:: :html:`<samp>PROF</samp>`
.. |TROF| replace:: :html:`<samp>TROF</samp>`
.. |NCSF| replace:: :html:`<samp>NCSF</samp>`
.. |SALF| replace:: :html:`<samp>SALF</samp>`
.. |CWMF| replace:: :html:`<samp>CWMF</samp>`
.. |MSFF| replace:: :html:`<samp>MSFF</samp>`
.. |VARF| replace:: :html:`<samp>VARF</samp>`
.. |HLTF| replace:: :html:`<samp>HLTF</samp>`
.. |IAR|  replace:: :html:`<samp>IAR</samp>`
.. |TUS|  replace:: :html:`<samp>TUS</samp>`
.. |HALT| replace:: :html:`<samp>HALT</samp>`

======  ====  ==============================  =======
Name    Size  Comments                        History
======  ====  ==============================  =======
|C|     15    Instruction pointer
|L|     2     Syllable pointer
|A|     48    AR top of stack register
|B|     48    BR second stack register
|X|     48    X extension of BR
|GH|    6     Combined G and H registers
|KY|    6     Combined K and Y registers
|MA|    15    Memory address register
|S|     15    Stack pointer register
|F|     15    Frame pointer register
|R|     15    PRT pointer or tally register
|P|     48    Last program word read
|T|     12    Current instruction
|Q|     9     Error flags
|AROF|  1     AR valid flag                   A
|BROF|  1     BR valid flag                   B
|PROF|  1     P has valid program word
|TROF|  1     T has valid instruction
|NCSF|  1     Normal/control mode             N
|SALF|  1     Subprogram mode                 S
|CWMF|  1     Character/word mode             C
|MSFF|  1     Mark stack flag mode            M
|VARF|  1     Variant flag                    V
|HLTF|  1     Halt flag
|IAR|   15    Interrupt pending register
|TUS|   32    Peripheral ready status
|HALT|  1     Halt processor
======  ====  ==============================  =======

.. |SET CPU HISTORY|  replace:: :html:`<samp>SET CPU HISTORY</samp>`
.. |SHOW CPU HISTORY| replace:: :html:`<samp>SHOW CPU HISTORY</samp>`
.. _SET CPU HISTORY:
.. _SHOW CPU HISTORY:

The CPU can maintain a history of the most recently executed instructions.

This is controlled by the |SET CPU HISTORY| and |SHOW CPU HISTORY| commands:

==================================================  ======================================
:html:`<samp>SET CPU HISTORY</samp>`                Clear history buffer
:html:`<samp>SET CPU HISTORY=0</samp>`              Disable history
:html:`<samp>SET CPU HISTORY=<var>n</var></samp>`   Enable history, length = |n|
:html:`<samp>SHOW CPU HISTORY</samp>`               Print CPU history
:html:`<samp>SHOW CPU HISTORY=<var>n</var></samp>`  Print first |n| entries of CPU history
==================================================  ======================================

.. |P1| replace:: ``P1``
.. |P2| replace:: ``P2``
.. |CL| replace:: ``CL``
.. |M|  replace:: ``M``
.. |KV| replace:: ``KV``

Instruction tracing shows the CPU flag
(``0`` for |P1|, ``1`` for |P2|),
the instruction address |CL|,
the |A|, |B|, |X|, |S|, |F|, |R|, |M|, |GH| & |KV| registers before the instruction execution.
The flags are shown if they are set.
The |Q|, symbolic instruction and lastly the pending interrupt vector.

.. _I/O channels:
.. |IO0| replace:: :html:`<samp>IO0</samp>`
.. |IO3| replace:: :html:`<samp>IO3</samp>`
.. _IO0:
.. _IO3:

I/O channels (|IO0|\ ..\ |IO3|)
-------------------------------
The B5500 supported up to 4 I/O channels.
These channels were floating and could talk to any device.
The simulator allows for any of the channels to be enabled or disabled.

Channels have the following registers:

.. |D|  replace:: :html:`<samp>D</samp>`
.. |CC| replace:: :html:`<samp>CC</samp>`
.. |W|  replace:: :html:`<samp>W</samp>`

====  ====  =====================
Name  Size  Comments
====  ====  =====================
|D|   48    Data control register
|CC|  6     Command code
|W|   48    Data buffer register
====  ====  =====================

I/O devices
-----------

.. _Console station:
.. |CON| replace:: :html:`<samp>CON</samp>`
.. _CON:

Console station (|CON|)
"""""""""""""""""""""""
The console station allows for communications with the operating system.
The station is half-duplex and will either print or accept input.
Whenever the computer sends a message,
it is prefixed with an ``R`` character.
When the station is ready to receive input,
it prompts with an ``I``.
Input is buffered until the return character is entered.
Backspace will remove the last character typed.
An :html:`<kbd>ESC</kbd>` will send an interrupt to the processor to request it read a record from the console.
An :html:`<kbd>ESC</kbd>` while in input mode will cancel input mode and clear any typed message.

.. _B124 card reader:
.. |CR|  replace:: :html:`<samp>CR</samp>`
.. |CR0| replace:: :html:`<samp>CR0</samp>`
.. |CR1| replace:: :html:`<samp>CR1</samp>`
.. _CR:
.. _CR0:
.. _CR1:

B124 card reader (|CR|)
"""""""""""""""""""""""
The card reader (|CR|) reads data from a disk file.
Cards are simulated as ASCII lines with terminating newlines.
Card reader files can either be text
(one character per column)
or column binary
(two characters per column).
The file type can be specified with a |SET| command:

=====================================================  =================================
:html:`<samp>SET CR<var>n</var> FORMAT=TEXT</samp>`    Set ASCII text mode
:html:`<samp>SET CR<var>n</var> FORMAT=BINARY</samp>`  Set for binary card images
:html:`<samp>SET CR<var>n</var> FORMAT=BCD</samp>`     Set for BCD records
:html:`<samp>SET CR<var>n</var> FORMAT=CBN</samp>`     Set for column binary BCD records
:html:`<samp>SET CR<var>n</var> FORMAT=AUTO</samp>`    Automatically determine format
=====================================================  =================================

or in the |ATTACH| command:

===============================================================================  ===================================
:html:`<samp>ATTACH CR<var>n</var> <var>file</var></samp>`                       Attach a file
:html:`<samp>ATTACH CR<var>n</var> -f <var>format</var> <var>file</var></samp>`  Attach a file with the given format
:html:`<samp>ATTACH CR<var>n</var> -s <var>file</var></samp>`                    Add file to current cards to read
:html:`<samp>ATTACH CR<var>n</var> -e <var>file</var></samp>`                    After file is read in, the reader
                                                                                 will receive and end-of-file flag
===============================================================================  ===================================

The card reader can be booted with the command:

=============================  ==========================
:html:`<samp>BOOT CR0</samp>`  Load first 3 words of card
=============================  ==========================

The B5500 could support up to 2 card readers.
|CR1| is by default disabled.

Error handling is as follows:

============  =====================
Error         Processed as
============  =====================
Not attached  Report error and stop
End-of-file   Out of cards
============  =====================

.. _B303 card punch:
.. |CP| replace:: :html:`<samp>CP</samp>`
.. _CP:

B303 card punch (|CP|)
""""""""""""""""""""""
The card reader (|CP|) writes data to a disk file.
Cards are simulated as ASCII lines with terminating newlines.
Card punch files can either be text
(one character per column)
or column binary
(two characters per column).
(The B5500 only supported text output).
The file type can be specified with a |SET| command:

=========================================  =================================
:html:`<samp>SET CP FORMAT=TEXT</samp>`    Set ASCII text mode
:html:`<samp>SET CP FORMAT=BINARY</samp>`  Set for binary card images
:html:`<samp>SET CP FORMAT=BCD</samp>`     Set for BCD records
:html:`<samp>SET CP FORMAT=CBN</samp>`     Set for column binary BCD records
:html:`<samp>SET CP FORMAT=AUTO</samp>`    Automatically determine format
=========================================  =================================

or in the |ATTACH| command:

===================================================================  ===================================
:html:`<samp>ATTACH CP <var>file</var></samp>`                       Attach a file
:html:`<samp>ATTACH CP -f <var>format</var> <var>file</var></samp>`  Attach a file with the given format
===================================================================  ===================================

Error handling is as follows:

============  =====================
Error         Processed as
============  =====================
Not attached  Report error and stop
OS I/O error  Report error and stop
============  =====================

.. _B320 line printer:
.. |LP| replace:: :html:`<samp>LP</samp>`
.. _LP:

B320 line printer (|LP|)
""""""""""""""""""""""""
The line printer (|LP|) writes data to a disk file as ASCII text with terminating newlines.
Currently set to handle standard signals to control paper advance.

===================================================================  =======================================
:html:`<samp>SET LP<var>n</var> LINESPERPAGE=<var>lpp</var></samp>`  Set number of lines per page on printer
===================================================================  =======================================

The channel skips are set as follows:

.. list-table::
   :stub-columns: 1

   * - 1
     - Skip to top of form
   * - 2
     - Skip to top of form
   * - 3
     - Skip to next even line
   * - 4
     - Skip to next odd line
   * - 5
     - Skip to middle or top of page
   * - 6
     - Skip ¼ of page
   * - 7
     - Skip one line
   * - 8
     - Skip one line
   * - 9
     - Skip one line
   * - 10
     - Skip one line
   * - 11
     - Skip one line
   * - 12
     - Skip to top of page

.. _B422 magnetic tape:
.. |MT|   replace:: :html:`<samp>MT</samp>`
.. |MT0|  replace:: :html:`<samp>MT0</samp>`
.. |MT16| replace:: :html:`<samp>MT16</samp>`
.. _MT:
.. _MT0:
.. _MT16:

B422 magnetic tape (|MT|)
"""""""""""""""""""""""""
These come in groups of 16 units each.
The controller defines which channel the devices will be on.

Each individual tape drive supports several options:
|MT| used as an example.

===================================================  ================================
:html:`<samp>SET MT<var>n</var> LOCKED</samp>`       Set the mag tape to be read-only
:html:`<samp>SET MT<var>n</var> WRITEENABLE</samp>`  Set the mag tape to be writable
===================================================  ================================

.. _B5470 disk controller:
.. _B5470 disk controller and B471 electronic storage unit:
.. _B471 electronic storage unit:
.. |DK|  replace:: :html:`<samp>DK</samp>`
.. |DK0| replace:: :html:`<samp>DK0</samp>`
.. |DK1| replace:: :html:`<samp>DK1</samp>`
.. |ESU| replace:: :html:`<samp>ESU</samp>`
.. _DK:
.. _DK0:
.. _DK1:
.. _ESU:

B5470 disk controller (|DK|) and B471 electronic storage unit (|ESU|)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
The B5500 could support up to 2 disk controllers.
Each of these could be attached to up to 10 drive units which each could have up to 5 individual drives.
The simulator models only full storage units.
Disk drives could also be shared by the controllers,
this limited the maximum storage units to 10.

Each of the disk controllers can be enabled or disabled.
Or they can be set to share units.

=================================  ========================================================
:html:`<samp>SET DK NODFX</samp>`  Support up to 20 |ESU| units
:html:`<samp>SET DK DFX</samp>`    Support sharing of |ESU| units for a maximum of 10 units
=================================  ========================================================

Each |ESU| can be attached to a disk file.
The simulator supports two types:

==============================================  ============================================================================
:html:`<samp>SET ESU<var>n</var> MODI</samp>`   Set storage unit to type ``I``, which supported up to 48 million characters
:html:`<samp>SET ESU<var>n</var> MODIB</samp>`  Set storage unit to type ``IB``, which supported up to 96 million characters
==============================================  ============================================================================

.. |DFX|   replace:: :html:`<samp>DFX</samp>`
.. |ESU0|  replace:: :html:`<samp>ESU0</samp>`
.. |ESU10| replace:: :html:`<samp>ESU10</samp>`
.. |ESU20| replace:: :html:`<samp>ESU20</samp>`
.. _DFX:
.. _ESU0:
.. _ESU10:
.. _ESU20:

If |DFX| is enabled,
only 10 |ESU| units maximum should be attached.
If |DFX| is disabled,
then unit |ESU10| corresponds to the first unit on |DK1|.

.. _B430 drum:
.. |DR| replace:: :html:`<samp>DR</samp>`
.. _DR:

B430 drum (|DR|)
""""""""""""""""
The B430 drum addressed up to 32K words and was used by MCP to cache segments.
In later models,
this was changed to a B6500 memory module to offer a solid-state drive.

==================================  ===========================================================
:html:`<samp>SET DR DRUM</samp>`    Set |DR| to emulate a drum, buffering to file
:html:`<samp>SET DR AUXMEM</samp>`  Set |DR| to emulate a solid-state drive; no file attachment
==================================  ===========================================================

B249 terminal controller
""""""""""""""""""""""""
.. |SET LINES| replace:: :html:`<samp>SET LINES</samp>`
.. _SET LINES:

The B249 terminal controller can support up to 32 lines,
with a maximum of 112 characters buffer per line.
The default is to support 8 lines.
The number of lines is set with the |SET LINES| command.
Note this command must be set before the |DTC| is attached,
and can't be changed while the |DTC| is attached.

===============================================  =========================================
:html:`<samp>SET DTC LINES=<var>n</var></samp>`  Set number of lines to allow (|n| = 0–32)
===============================================  =========================================

The buffer size of all lines can be modified based on MCP's needs and what it is configured to.
Note this command must be set before the |DTC| is attached,
and can't be changed while the |DTC| is attached.

=================================================  =======================================
:html:`<samp>SET DTC BUFSIZE=<var>n</var></samp>`  Set the buffer size for all connections
=================================================  =======================================

The |ATTACH| command specifies the port to be used for Telnet sessions:

===============================================  =====================
:html:`<samp>ATTACH COM <var>port</var></samp>`  Set up listening port
===============================================  =====================

where :html:`<samp><var>port</var></samp>` is a decimal number between 1 and 65535 that is not being used for other TCP/IP activities.

.. |DETACH COM|         replace:: :html:`<samp>DETACH COM</samp>`
.. |SET COM DISCONNECT| replace:: :html:`<samp>SET COM DISCONNECT</samp>`
.. _SET COM DISCONNECT:
.. _DETACH COM:

Once |DTC| is attached and the simulator is running,
the |DTC| listens for connections on the specified port.
It assumes that any incoming connection is a Telnet connection.
The connections remain open until disconnected either by the Telnet client,
a |SET COM DISCONNECT| command,
or a |DETACH COM| command.

====================================================  ===================
:html:`<samp>SET DTC DISCONNECT=<var>n</var></samp>`  Disconnect line |n|
====================================================  ===================

The |DTC| implements the following special |SHOW| commands:

=========================================  =========================================
:html:`<samp>SHOW DTC CONNECTIONS</samp>`  Display current connections to the |DTC|
:html:`<samp>SHOW DTC STATISTICS</samp>`   Display statistics for active connections
:html:`<samp>SHOW DTC LOG</samp>`          Display logging for all lines
=========================================  =========================================

Logging can be controlled as follows:

=================================================================  ==================================================================
:html:`<samp>SET DTC LOG=<var>n</var>=<var>filename</var></samp>`  Log output of line |n| to :html:`<samp><var>filename</var></samp>`
:html:`<samp>SET DTC NOLOG</samp>`                                 Disable logging and close log file
=================================================================  ==================================================================

.. |DTC| replace:: :html:`<samp>DTC</samp>`
.. _DTC:

When a connection is established to the |DTC|,
it supports the following special character functions
(``^`` represents Control Character):

.. |ENQ| replace:: :html:`<samp><abbr title="Enquiry">ENQ</abbr></samp>`
.. |STX| replace:: :html:`<samp><abbr title="Start of Text">STX</abbr></samp>`

=======  ========================================================
``^E``   Send |ENQ|: *"Who are you?"*
``^B``   Send |STX|: Forces special control character into buffer
``}``    Append character to buffer and terminate line
``CR``   Terminate line
``LF``   Terminate line
``~``    Terminate line
``^U``   Clear input buffer
``BS``   Delete last character entered
``DEL``  Delete last character entered
``?``    Set abnormal flag
=======  ========================================================

Symbolic display and input
==========================
The B5500 simulator implements symbolic display and input.
These are controlled by the following switches to the |EXAMINE| and |DEPOSIT| commands:

.. table::
   :class: switches

   ======  ======================================
   ``-c``  Display/enter character mode syllables
   ``-w``  Display/enter word mode syllables
   ``-b``  Display/enter character data
   \       Display/enter octal data
   ======  ======================================

The symbolic input/display supports 4 formats for instruction display:

* :html:`<samp><var>opcode</var></samp>`
* :html:`<samp><var>opcode</var> <var>6-bit constant</var></samp>`
* :html:`<samp><var>opcode</var> <var>4-bit constant</var></samp>`
* :html:`<samp><var>opcode</var> <var>10-bit constant</var></samp>`

Character codes
===============
.. |BCI| replace:: :html:`<samp>BCI</samp>`
.. |BCD| replace:: :html:`<samp>BCD</samp>`

=====  =====  =====  =========
|BCI|  |BCD|  ASCII  Card code
=====  =====  =====  =========
00     12     ``0``  10
01     01     ``1``  1
02     02     ``2``  2
03     03     ``3``  3
04     04     ``4``  4
05     05     ``5``  5
06     06     ``6``  6
07     07     ``7``  7
10     10     ``8``  8
11     11     ``9``  9
12     37     ``#``  3-8
13     77     ``@``  4-8
14     72     ``?``  2-8
15     15     ``:``  5-8
16     16     ``>``  10-6-8
17     17     ``}``  7-8
20     60     ``+``  12-10
21     61     ``A``  10-1
22     62     ``B``  10-2
23     63     ``C``  10-3
24     64     ``D``  10-4
25     65     ``E``  10-5
26     66     ``F``  10-6
27     67     ``G``  10-7
30     70     ``H``  10-8
31     71     ``|``  10-9
32     73     ``.``  10-3-8
33     33     ``[``  10-4-8
34     20     ``&``  12
35     34     ``(``  10-5-8
36     66     ``<``  10-6-8
37     35     ``~``  10-7-8
40     52     ``|``  11-10
41     41     ``J``  11-1
42     42     ``K``  11-2
43     43     ``L``  11-3
44     44     ``M``  11-4
45     45     ``N``  11-5
46     46     ``O``  11-6
47     47     ``P``  11-7
50     50     ``Q``  11-8
51     51     ``R``  11-9
52     53     ``$``  11-3-8
53     54     ``*``  11-4-8
54     40     ``-``  11
55     74     ``)``  11-5-8
56     56     ``;``  11-6-8
57     57     ``{``  11-7-8
60     00     Blank
61     21     ``/``  10-1
62     22     ``S``  12-2
63     23     ``T``  12-3
64     24     ``U``  12-4
65     25     ``V``  12-5
66     26     ``W``  12-6
67     27     ``X``  12-7
70     30     ``Y``  12-8
71     31     ``Z``  12-9
72     33     ``,``  10-3-8
73     17     ``%``  10-4-8
74     52     ``!``  10-2-8
75     13     ``=``  10-5-8
76     55     ``]``  10-6-8
77     56     ``"``  10-7-8
=====  =====  =====  =========
