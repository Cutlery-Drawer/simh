.. -*- coding: utf-8; mode: rst; tab-width: 4; truncate-lines: t; indent-tabs-mode: nil; truncate-lines: t; -*- vim:set et ts=4 ft=rst nowrap:

.. role:: html(raw)
   :format: html

.. |ATTACH| replace:: :html:`<samp><b>ATTACH</b></samp>`
.. |SET|    replace:: :html:`<samp><b>SET</b></samp>`
.. |SHOW|   replace:: :html:`<samp><b>SHOW</b></samp>`
.. |esc|    replace:: :html:`<kbd>esc</kbd>`
.. |n|      replace:: :html:`<samp><var>n</var></samp>`
.. |`|      replace:: :literal:`\``

************************
IBM 7070 simulator usage
************************
:Date: 2018-07-25
:Revision: $Format:%H$
:Copyright: See `LICENSE.txt <../LICENSE.txt>`_ for terms of use.

.. topic:: **Copyright notice**

   The following copyright notice applies to the SIMH source, binary, and documentation:

   .. include:: ../LICENSE.txt

.. sectnum:: :suffix: .
.. contents::
   :backlinks: none
   :depth: 3
   :local:

Introduction
============
The IBM 7070 was introduced in June 1960,
as a replacement to the IBM 650.
It had core memory up to 10,000 10-digit words.
The 7072 was introduced November 1962 and the 7074 on November 1961.
The 7074 is a faster version of the 7070 with the addition of memory up to 40,000 10-digit words.
The first 100 memory locations can be used as index registers.
Most memory reference instructions allow for a field of digits to be selected to operate on and not modify the rest.

The 7070 is a decimal machine with each word consisting of 10 digits plus a sign.
The sign can be plus, minus, or alpha.
Alpha data is stored 5 characters to a word
(2 digits per character).

Simulator files
===============
To compile the IBM 7070,
you must define ``USE_INT64`` as part of the compilation command-line.

+--------------+-------------------+-----------------------------------------+
| Subdirectory | File              | Contains                                |
+==============+===================+=========================================+
| ``I7000/``   | ``i7000_defs.h``  | IBM 7000 simulators general definitions |
|              +-------------------+-----------------------------------------+
|              | ``i7070_defs.h``  | IBM 7070 simulator specific definitions |
|              +-------------------+-----------------------------------------+
|              | ``i7000_chan.c``  | Generic channel interface               |
|              +-------------------+-----------------------------------------+
|              | ``i7070_cpu.c``   | 7070 CPU, channel, interface            |
|              +-------------------+-----------------------------------------+
|              | ``i7070_chan.c``  | 7070 channel                            |
|              +-------------------+-----------------------------------------+
|              | ``i7070_sys.c``   | 7070 system interface                   |
|              +-------------------+-----------------------------------------+
|              | ``i7000_cdr.c``   | 7500 card reader                        |
|              +-------------------+-----------------------------------------+
|              | ``i7000_cdp.c``   | 7550 card punch                         |
|              +-------------------+-----------------------------------------+
|              | ``i7000_com.c``   | 7750 communications controller          |
|              +-------------------+-----------------------------------------+
|              | ``i7000_con.c``   | 7551 inquiry console                    |
|              +-------------------+-----------------------------------------+
|              | ``i7000_dsk.c``   | 1301/2302 disk and 7238 drum controller |
|              +-------------------+-----------------------------------------+
|              | ``i7000_ht.c``    | 7340 hypertape controller               |
|              +-------------------+-----------------------------------------+
|              | ``i7000_lpr.c``   | 7400 line printer                       |
|              +-------------------+-----------------------------------------+
|              | ``i7000_mt.c``    | 729 tape controller                     |
|              +-------------------+-----------------------------------------+
|              | ``i7000_chron.c`` | ChronoClock                             |
+--------------+-------------------+-----------------------------------------+

IBM 7070 features
=================
The IBM 7070 simulator is configured as follows:

==================  =========================================
Device name(s)      Simulates
==================  =========================================
|CPU|_              7070 CPU with 30KW of memory
|CH0|_              Unit record devices
|CH1|_\ ..\ |CH4|_  7504 tape controller channels
|CH5|_\ ..\ |CH7|_  7907 disk, hypertape, controller channels
|MTA|_              729 magnetic tape controller
|MTB|_              729 magnetic tape controller
|MTC|_              729 magnetic tape controller
|CHRON|_            ChronoClock
|HTA|_              7340 hypertape, default not included
|HTB|_              7340 hypertape, default not included
|CDR|_              7500 card reader
|CDP|_              7550 card punch
|LP|_               7400 line printer
|DK|_               1301/2302/7304 disk
|INQ|_              7551 inquiry console
|COM|_              7750 communications controller
|COML|_             7750 communications lines
==================  =========================================

If desired,
individual devices can be removed from the system by editing ``i7000_defs.h`` and changing the number of :html:`<samp>NUM_DEVS_<var>xxx</var></samp>` entries.
The entry :html:`<samp>NUM_UNITS_<var>xx</var></samp>` determines the number of individual units for each controller.

The 7090 simulator implements several unique stop conditions:

* Undefined CPU instruction
* IO device not ready
* IO check error
* Divide error
* Field overflow (CPU enabled)
* Sign change (CPU enabled)
* Alpha index word
* Invalid message to 7750
* No buffer storage available for input character on 7750
* No buffer storage available for output character on 7750

.. |CPU| replace:: :html:`<samp>CPU</samp>`

|CPU|
-----
The CPU options include setting memory size and CPU type.

============================================  ===================================
:html:`<samp><b>SET CPU 7070</b></samp>`      Set CPU to emulate 7070
:html:`<samp><b>SET CPU 7074</b></samp>`      Set CPU to emulate 7074
:html:`<samp><b>SET CPU 5K</b></samp>`        Set memory to 5K
:html:`<samp><b>SET CPU 10K</b></samp>`       Set memory to 10K
:html:`<samp><b>SET CPU 15K</b></samp>`       Set memory to 15K\ [#note]_
:html:`<samp><b>SET CPU 20K</b></samp>`       Set memory to 20K\ [#note]_
:html:`<samp><b>SET CPU 25K</b></samp>`       Set memory to 25K\ [#note]_
:html:`<samp><b>SET CPU 30K</b></samp>`       Set memory to 30K\ [#note]_
:html:`<samp><b>SET CPU NOFLOAT</b></samp>`   Disable floating-point
:html:`<samp><b>SET CPU FLOAT</b></samp>`     Enable floating-point
:html:`<samp><b>SET CPU NOEXTEND</b></samp>`  Disable extended memory support
:html:`<samp><b>SET CPU EXTEND</b></samp>`    Enable extended memory support
:html:`<samp><b>SET CPU TIMER</b></samp>`     Enable interval timer and interrupt
:html:`<samp><b>SET CPU NOTIMER</b></samp>`   Disable interval timer
============================================  ===================================

.. [#note] Memory size is 10KW on a standard CPU,
           extended option must be enabled to use memory sizes over 10KW.

CPU registers include the visible state of the processor as well as the control registers for the interrupt system.

.. |IC|  replace:: :html:`<samp class="register">IC</samp>`
.. |AC1| replace:: :html:`<samp class="register">AC1</samp>`
.. |AC2| replace:: :html:`<samp class="register">AC2</samp>`
.. |AC3| replace:: :html:`<samp class="register">AC3</samp>`
.. |IND| replace:: :html:`<samp class="register">IND</samp>`
.. |SW1| replace:: :html:`<samp class="register">SW1</samp>`
.. |SW4| replace:: :html:`<samp class="register">SW4</samp>`
.. |SW|  replace:: :html:`<samp class="register">SW</samp>`

================  =============  ===================
Name              Size (digits)  Comments
================  =============  ===================
|IC|              5              Program counter
|AC1|             10s            Accumulator 1
|AC2|             10s            Accumulator 2
|AC3|             10s            Accumulator 3
|IND|             10             Error indicators
|SW1|\ ..\ |SW4|  1              Sense switches 1..4
|SW|              4              Sense switches
================  =============  ===================

The CPU can maintain a history of the most recently executed instructions.

This is controlled by the :html:`<samp><b>SET CPU HISTORY</b></samp>` and :html:`<samp><b>SHOW CPU HISTORY</b></samp>` commands:

=========================================================  ======================================
:html:`<samp><b>SET CPU HISTORY</b></samp>`                Clear history buffer
:html:`<samp><b>SET CPU HISTORY=0</b></samp>`              Disable history
:html:`<samp><b>SET CPU HISTORY=</b><var>n</var></samp>`   Enable history, length = |n|
:html:`<samp><b>SHOW CPU HISTORY</b></samp>`               Print CPU history
:html:`<samp><b>SHOW CPU HISTORY=</b><var>n</var></samp>`  Print first |n| entries of CPU history
=========================================================  ======================================

Instruction tracing shows the instruction counter,
the generated effective address,
the value of memory before and after execution of the instruction and the decoded instruction in symbolic format.

.. |CH0| replace:: :html:`<samp>CH0</samp>`
.. |CH1| replace:: :html:`<samp>CH1</samp>`
.. |CH4| replace:: :html:`<samp>CH4</samp>`
.. |CH5| replace:: :html:`<samp>CH5</samp>`
.. |CH7| replace:: :html:`<samp>CH7</samp>`
.. |CH8| replace:: :html:`<samp>CH8</samp>`
.. _CH0:
.. _CH1:
.. _CH4:
.. _CH5:
.. _CH7:
.. _CH8:
.. _I/O channels:

I/O channels (|CH0|\ ..\ |CH8|)
-------------------------------
The 7070 supports up to 8 channels.
Channel models include:

====  =============================
7604  Standard multiplexer channel
7907  Advanced capabilities channel
====  =============================

Channels are fixed on the 7070.

Channel 0 is a pseudo-channel for unit record devices.

Channels have the following registers:

.. |ADDR|     replace:: :html:`<samp class="register">ADDR</samp>`
.. |CMD|      replace:: :html:`<samp class="register">CMD</samp>`
.. |LIMIT|    replace:: :html:`<samp class="register">LIMIT</samp>`
.. |ASM|      replace:: :html:`<samp class="register">ASM</samp>`
.. |LOCATION| replace:: :html:`<samp class="register">LOCATION</samp>`
.. |FLAGS|    replace:: :html:`<samp class="register">FLAGS</samp>`

==========  =============  =============================
Name        Size (digits)  Comments
==========  =============  =============================
|ADDR|      6              Channel data address
|CMD|       2              Channel command (octal)
|LIMIT|     6              Channel word count
|ASM|       10s            Channel assembly register
|LOCATION|  6              Channel location counter
|FLAGS|     32             Channel status flags (binary)
==========  =============  =============================

For the meaning of bits in |FLAGS|,
see ``i7000_defs.h``.

The command:

===================================  ===================================
:html:`<samp><b>SHOW CH</b></samp>`  Print summary of devices on channel
===================================  ===================================

Unit record devices
-------------------
.. |INQ| replace:: :html:`<samp>INQ</samp>`
.. _INQ:
.. _7500 inquiry station:

7500 inquiry station (|INQ|)
""""""""""""""""""""""""""""
The inquiry station allows for communications with the operating system.
The station is half-duplex and will either print or accept input.
Whenever the computer sends a message,
it is prefixed with an ``R`` character.
When the station is ready to receive input,
it prompts with an ``I``.
Input is buffered until the return character is entered.
:html:`<kbd>Backspace</kbd>` will remove the last character typed.
An |esc| will send an interrupt to the processor to request it read a record from the console.
An |esc| while in input mode will cancel input mode and clear any typed message.

.. |CDR| replace:: :html:`<samp>CDR</samp>`
.. _CDR:
.. _7500 card reader:

7500 card reader (|CDR|)
""""""""""""""""""""""""
The card reader (|CDR|) reads data from a disk file.
Cards are simulated as ASCII lines with terminating newlines.
Card reader files can either be text (one character per column) or column binary (two characters per column).
The file type can be specified with a |SET| command:

=================================================  =================================
:html:`<samp><b>SET CDR FORMAT=TEXT</b></samp>`    Set ASCII text mode
:html:`<samp><b>SET CDR FORMAT=BINARY</b></samp>`  Set for binary card images
:html:`<samp><b>SET CDR FORMAT=BCD</b></samp>`     Set for BCD records
:html:`<samp><b>SET CDR FORMAT=CBN</b></samp>`     Set for column binary BCD records
:html:`<samp><b>SET CDR FORMAT=AUTO</b></samp>`    Automatically determine format
=================================================  =================================

or in the |ATTACH| command:

===========================================================================  ===================================================================
:html:`<samp><b>ATTACH CDR</b> <var>file</var></samp>`                       Attach a file
:html:`<samp><b>ATTACH CDR -f</b> <var>format</var> <var>file</var></samp>`  Attach a file with the given format
:html:`<samp><b>ATTACH CDR -s</b> <var>file</var></samp>`                    Add file onto current cards to read
:html:`<samp><b>ATTACH CDR -e</b> <var>file</var></samp>`                    After file is read in, the reader will receive and end-of-file flag
===========================================================================  ===================================================================

The card reader can be booted with the following command:

====================================  ==================================
:html:`<samp><b>BOOT CDR</b></samp>`  Start card reader to read one card
====================================  ==================================

.. |BOOT| replace:: :html:`<samp><b>BOOT</b></samp>`
.. |LCOL| replace:: :html:`<samp class="register">LCOL</samp>`

|BOOT| is currently not working.

The 7500 card reader supported two modes of operation,
alpha mode (default),
and load mode in which the card had 5 words that were read into storage.
To enable this,
set |LCOL| to non-zero:

=====================================================  =========================
:html:`<samp><b>SET CDR LCOL=</b><var>n</var></samp>`  Set load column detection
=====================================================  =========================

If |LCOL| is set to a non-zero value,
then on every card read is checked to see if there is a 12-punch in the designated column.
If so,
the card is converted to decimal,
every tenth column is used to determine the sign.
Zone 12 is +,
Zone 11 is −,
no zone is Alpha.

The card reader could single ready on one of two attention lines.
To set which one receives the ready signal,
use the following commands:

===========================================  =============================
:html:`<samp><b>SET CDR NOATTEN</b></samp>`  Don't signal when reader done
:html:`<samp><b>SET CDR ATTENA</b></samp>`   Signal on priority channel A
:html:`<samp><b>SET CDR ATTENB</b></samp>`   Signal on priority channel B
===========================================  =============================

Error handling is as follows:

============  =====================
Error         Processed as
============  =====================
Not attached  Report error and stop
End of file   Out of cards
============  =====================

.. |CDP| replace:: :html:`<samp>CDP</samp>`
.. _CDP:
.. _7550 card punch:

7550 card punch (|CDP|)
"""""""""""""""""""""""
The card reader (|CDP|) writes data to a disk file.
Cards are simulated as ASCII lines with terminating newlines.
Card punch files can either be text (one character per column) or column binary (two characters per column).
The file type can be specified with a |SET| command:

==========================================  =================================
:html:`<samp>SET CDP FORMAT=TEXT</samp>`    Set ASCII text mode
:html:`<samp>SET CDP FORMAT=BINARY</samp>`  Set for binary card images
:html:`<samp>SET CDP FORMAT=BCD</samp>`     Set for BCD records
:html:`<samp>SET CDP FORMAT=CBN</samp>`     Set for column binary BCD records
:html:`<samp>SET CDP FORMAT=AUTO</samp>`    Automatically determine format
==========================================  =================================

or in the |ATTACH| command:

===========================================================================  ===================================
:html:`<samp><b>ATTACH CDP</b> <var>file</var></samp>`                       Attach a file
:html:`<samp><b>ATTACH CDP -f</b> <var>format</var> <var>file</var></samp>`  Attach a file with the given format
===========================================================================  ===================================

The card punch could single ready on one of two attention lines.
To set which one receives the ready signal,
use the following commands:

===========================================  ============================
:html:`<samp><b>SET CDP NOATTEN</b></samp>`  Don't signal when punch done
:html:`<samp><b>SET CDP ATTENA</b></samp>`   Signal on priority channel A
:html:`<samp><b>SET CDP ATTENB</b></samp>`   Signal on priority channel B
===========================================  ============================

Error handling is as follows:

============  =====================
Error         Processed as
============  =====================
Not attached  Report error and stop
OS I/O error  Report error and stop
============  =====================

.. |LP| replace:: :html:`<samp>LP</samp>`
.. _LP:
.. _7400 line printer:

7400 line printer (|LP|)
""""""""""""""""""""""""
The line printer (|LP|) writes data to a disk file as ASCII text with terminating newlines.
Currently set to handle standard signals to control paper advance.

==============================================================  =============================================
:html:`<samp><b>SET LP NO</b>/<b>ECHO</b></samp>`               Set echoing to console of line-printer output
:html:`<samp><b>SET LP LINESPERPAGE=</b><var>lpp</var></samp>`  Set number of lines per page on printer
==============================================================  =============================================

The line printer could single ready on one of two attention lines.
To set which one receives the ready signal,
use the following commands:

==========================================  ===============================
:html:`<samp><b>SET LP NOATTEN</b></samp>`  Don't signal when printing done
:html:`<samp><b>SET LP ATTENA</b></samp>`   Signal on priority channel A
:html:`<samp><b>SET LP ATTENB</b></samp>`   Signal on priority channel B
==========================================  ===============================

Error handling is as follows:

============  =====================
Error         Processed as
============  =====================
Not attached  Report error and stop
OS I/O error  Report error and stop
============  =====================

Magnetic tape devices
---------------------
.. |MTA|   replace:: :html:`<samp>MTA</samp>`
.. |MTB|   replace:: :html:`<samp>MTB</samp>`
.. |MTC|   replace:: :html:`<samp>MTC</samp>`
.. |MTA-C| replace:: :html:`<samp>MTA-C</samp>`
.. _MTA:
.. _MTB:
.. _MTC:
.. _MTA-C:
.. _729 magnetic tape:

729 magnetic tape (|MTA-C|)
"""""""""""""""""""""""""""
These come in groups of 10 units each.

Each individual tape drive support several options:
|MTA| used as an example.

==================================================================  ==================================
:html:`<samp><b>SET MTA</b><var>n</var> <b>REWIND</b></samp>`       Set the mag tape to the load point
:html:`<samp><b>SET MTA</b><var>n</var> <b>LOCKED</b></samp>`       Set the mag tape to be read-only
:html:`<samp><b>SET MTA</b><var>n</var> <b>WRITEENABLE</b></samp>`  Set the mag tape to be writable
:html:`<samp><b>SET MTA</b><var>n</var> <b>LOW</b></samp>`          Set mag tape to low density
:html:`<samp><b>SET MTA</b><var>n</var> <b>HIGH</b></samp>`         Set mag tape to high density
==================================================================  ==================================

Options: Density :html:`<samp>LOW</samp>`\ /\ :html:`<samp>HIGH</samp>` is for informational purposes only,
and does not change the format of how tapes are written.

Tape drives can be booted with:

================================================  ==============================
:html:`<samp><b>BOOT MT</b><var>xn</var></samp>`  Read in record into location 0
================================================  ==============================

Channel 1 supports the read binary opcode to load binary tapes in octal format.

.. |CHRON| replace:: :html:`<samp>CHRON</samp>`
.. _CHRON:

ChronoClock
"""""""""""
Disabled by default.
This is a special 729 tape drive which returns the current time.
It supports the option of setting the channel and drive that it will occupy.
Note: You must disable the real 729 drive that is is replacing.
The clock responds to Read and Backspace commands.
A read results in a 10-character buffer being generated that has the month, day, hour, minutes, seconds and milliseconds.
This time is taken from the local computer time.

=======================================================  =================================
:html:`<samp><b>SET CHRON CHAN=</b><var>n</var></samp>`  Set channel for chrono clock
:html:`<samp><b>SET CHRON UNIT=</b><var>n</var></samp>`  Set the unit for the chrono clock
=======================================================  =================================

Example: To set Chronoclock to unit A9,
do the following::

    SET MTA9 DISABLE
    SET CHRON UNIT=9 CHAN=A

7907 devices
------------
These devices must be attached to a 7907 channel to work.

.. |DK| replace:: :html:`<samp>DK</samp>`
.. _DK:

1301/1302/2302/7320 disk devices
""""""""""""""""""""""""""""""""
The 7631 file control supports up to ten devices,
which can be 7320 drums,
1301 disks,
1302 disks,
or 2302 disks.
Unit types are specified with the |SET| command.

=================================================================  =======================================
:html:`<samp><b>SET DK</b><var>n</var> <b>TYPE=7320</b></samp>`    Unit |n| is a drum
:html:`<samp><b>SET DK</b><var>n</var> <b>TYPE=7320-2</b></samp>`  Unit |n| is a drum (two modules)
:html:`<samp><b>SET DK</b><var>n</var> <b>TYPE=1301</b></samp>`    Unit |n| is a 1301 disk
:html:`<samp><b>SET DK</b><var>n</var> <b>TYPE=130l-2</b></samp>`  Unit |n| is a 1301-2 disk (two modules)
:html:`<samp><b>SET DK</b><var>n</var> <b>TYPE=1302</b></samp>`    Unit |n| is a 1302 disk
:html:`<samp><b>SET DK</b><var>n</var> <b>TYPE=1302-2</b></samp>`  Unit |n| is a 1302-2 disk (two modules)
:html:`<samp><b>SET DK</b><var>n</var> <b>TYPE=2302</b></samp>`    Unit |n| is a 2302 disk
=================================================================  =======================================

Units can be :html:`<samp><b>SET ENABLED</b></samp>` or :html:`<samp><b>DISABLED</b></samp>`.
In addition,
units can be set to enable or disable formatting:

=========================================================================  ====================================================
:html:`<samp><b>SET DK</b><var>n</var> <b>FORMAT</b></samp>`               Enable formatting
:html:`<samp><b>SET DK</b><var>n</var> <b>NOFORMAT</b></samp>`             Disable formatting
:html:`<samp><b>SET DK</b><var>n</var> <b>HA2</b></samp>`                  Enable writing of home address 2
:html:`<samp><b>SET DK</b><var>n</var> <b>NOHA2</b></samp>`                Disable writing of home address 2
:html:`<samp><b>SET DK</b><var>n</var> <b>MODULE=</b><var>n</var></samp>`  Set modules for unit; modules can only be even (0–8)
:html:`<samp><b>SET DK</b><var>n</var> <b>CHAN=</b><var>n</var></samp>`    Set channel for unit (A-H)
:html:`<samp><b>SET DK</b><var>n</var> <b>SELECT=</b><var>n</var></samp>`  Set select on channel (0 or 1)
=========================================================================  ====================================================

Formatting is disabled by default.

Error handling is as follows:

============  =====================
Error         Processed as
============  =====================
Not attached  Report error and stop
OS I/O error  Report error and stop
============  =====================

.. |HTA| replace:: :html:`<samp>HTA</samp>`
.. |HTB| replace:: :html:`<samp>HTB</samp>`
.. _HTA:
.. _HTB:
.. _Hypertape 7340 tape drive:

Hypertape 7340 tape drive (|HTA|)
"""""""""""""""""""""""""""""""""
These come in groups of 10 units each.
The controller defines which channel the devices will be on.
By default,
these devices are not installed.

=======================================================  ==============================
:html:`<samp><b>SET HTA CHAN=</b><var>n</var></samp>`    Set channel for unit (A–H)
:html:`<samp><b>SET HTA SELECT=</b><var>n</var></samp>`  Set select on channel (0 or 1)
=======================================================  ==============================

Each individual tape drive support several options:
|HTA| used as an example.

==================================================================  ================================
:html:`<samp><b>SET HTA</b><var>n</var> <b>LOCKED</b></samp>`       Set the mag tape to be read-only
:html:`<samp><b>SET HTA</b><var>n</var> <b>WRITEENABLE</b></samp>`  Set the mag tape to be writable
==================================================================  ================================

.. NOTE::
   Hypertape drives may not be working correctly since there is very little documentation available on them.

.. |COM|  replace:: :html:`<samp>COM</samp>`
.. |COML| replace:: :html:`<samp>COML</samp>`
.. _COM:
.. _COML:

7750 communications controller (|COM| and |COML|)
"""""""""""""""""""""""""""""""""""""""""""""""""
The 7750 is modeled as a terminal multiplexer with 33 lines.
It consists of two device:
|COM| is the multiplexer controller,
and |COML| is the individual lines.
For the first 32 lines,
the 7750 performs input and output through Telnet sessions connected via a user-specified listening port;
the 33rd line is permanently attached to the simulator console window.
The |ATTACH| command specifies the port to be used for Telnet sessions:

======================================================  =====================
:html:`<samp><b>ATTACH COM</b> <var>port</var></samp>`  Set up listening port
======================================================  =====================

where port is a decimal number between 1 and 65535 that is not being used other TCP/IP activities.

Each line
(each unit of |COML|) can be set to one of two modes:
KSR-35 and KSR-37.
In KSR-35 mode,
lowercase input and output characters are converted automatically to uppercase,
and parity is ignored.
In KSR-37 mode,
lowercase characters are left alone,
and even parity is generated on input.
KSR-37 is the default.

Once |COM| is attached and the simulator is running,
the 7750 listens for connections on the specified port.
It assumes that any incoming connection is a Telnet connections.
The connections remain open until disconnected either by the Telnet client,
a :html:`<samp><b>SET COM DISCONNECT</b></samp>` command,
or a :html:`<samp><b>DETACH COM</b></samp>` command.

===========================================================  ================================
:html:`<samp><b>SET COM DISCONNECT=</b><var>n</var></samp>`  Disconnect line |n|
:html:`<samp><b>SET COM CHAN=</b><var>n</var></samp>`        Set channel for |COM| controller
===========================================================  ================================

The 7750 implements the following special |SHOW| commands:

================================================  =========================================
:html:`<samp><b>SHOW COM CONNECTIONS</b></samp>`  Display current connections to the 7750
:html:`<samp><b>SHOW COM STATISTICS</b></samp>`   Display statistics for active connections
================================================  =========================================

The 7750 implements the following special |SET| commands:

.. |filename| replace:: :html:`<samp><var>filename</var></samp>`

===============================================================================  ====================================
:html:`<samp><b>SET COML</b><var>n</var> <b>LOG=</b><var>filename</var></samp>`  Log output of line |n| to |filename|
:html:`<samp><b>SET COML</b><var>n</var> <b>NOLOG</b></samp>`                    Disable logging and close log file
:html:`<samp><b>SET COML</b><var>n</var> <b>KSR35</b></samp>`                    Set line |n| to ksr-35
:html:`<samp><b>SET COML</b><var>n</var> <b>KSR37</b></samp>`                    Set line |n| to ksr-37
:html:`<samp><b>SET COML</b><var>n</var> <b>2741</b></samp>`                     Set line |n| to 2741
===============================================================================  ====================================

The controller (|COM|) implements these registers:

.. |ENABLE| replace:: :html:`<samp class="register">ENABLE</samp>`
.. |MSGNUM| replace:: :html:`<samp class="register">MSGNUM</samp>`
.. |STATE|  replace:: :html:`<samp class="register">STATE</samp>`

========  ====  =============================
Name      Size  Comments
========  ====  =============================
|ENABLE|  1     Enable flag
|STATE|   6     Controller state
|MSGNUM|  12    Input message sequence number
========  ====  =============================

Symbolic display and input
==========================
The IBM 7070 simulator implements symbolic display and input.
Display is controlled by command-line switches:

.. table::
   :class: switches

   ======  ===================================
   ``-c``  Display/enter as BCD character
   ``-m``  Display/enter instruction mnemonics
           Display/enter as decimal number
   ======  ===================================

Instruction input uses standard 7070 assembler syntax.

* :html:`<samp><var>opcode</var> <var>*</var><var>operand</var><var>+X#</var><var>(n,m)</var></samp>`
* :html:`<samp><var>opcode</var> <var>operand</var><var>+X#</var>,f2</samp>`
* :html:`<samp><var>opcode</var> <var>opcode2</var><var>operand</var><var>+X#</var></samp>`

Character codes
===============

==========  ==========  ===============  ===  ======  ============
Commercial  Scientific  ASCII            BCD  Card    Remark
==========  ==========  ===============  ===  ======  ============
\                                        00           Blank
``1``                   ``0``            01   1
``2``                   ``0``            02   2
``3``                   ``0``            03   3
``4``                   ``0``            04   4
``5``                   ``0``            05   5
``6``                   ``0``            06   6
``7``                   ``0``            07   7
``8``                   ``0``            10   8
``9``                   ``0``            11   9
``0``                   ``0``            12   10
``#``       ``=``       ``=``            13   3–8
``@``       ``'``       ``'``\ /\ ``@``  14   4–8
``:``                   ``:``            15   5–8
``>``                   ``>``            16   6–8
``√``                   ``"``            17   7–8     Tape mark
``ƀ``                   ``_``            20   2–8
``/``                   ``/``            21   10–1
``S``                   ``S``            22   10–1
``T``                   ``T``            23   10–2
``U``                   ``U``            24   10–3
``V``                   ``V``            25   10–4
``W``                   ``W``            26   10–5
``X``                   ``X``            27   10–6
``Y``                   ``Y``            30   10–7
``Z``                   ``Z``            31   10–8
``#``                   ``#``            32   10–2–8  Word mark
``,``                   ``,``            33   10–3–8
``%``       ``(``       ``%``\ /\ ``(``  34   10–4–8
|`|                     |`|              35   10–5–8
``\``                   ``\``            36   10–6–8
``⧻``                   ``{``            37   10–7–8  Segment mark
``-``                   ``-``            40   11      Also −0
``J``                   ``J``            41   11–1
``K``                   ``K``            42   11–2
``L``                   ``L``            43   11–3
``M``                   ``M``            44   11–4
``N``                   ``N``            45   11–5
``O``                   ``O``            46   11–6
``P``                   ``P``            47   11–7
``Q``                   ``Q``            50   11–8
``R``                   ``R``            51   11–9
``!``                   ``!``            52   11–2–8
``$``                   ``$``            53   11–3–8
``*``                   ``*``            54   11–4–8
``]``                   ``]``            55   11–5–8
``;``                   ``;``            56   11–6–8
``△``                   ``^``            57   11–7–8
``&``       ``+``       ``&``\ /\ ``+``  60   12      Also +0
``A``                   ``A``            61   12–1
``B``                   ``B``            62   12–2
``C``                   ``C``            63   12–3
``D``                   ``D``            64   12–4
``E``                   ``E``            65   12–5
``F``                   ``F``            66   12–6
``G``                   ``G``            67   12–7
``H``                   ``H``            70   12–8
``I``                   ``I``            71   12–9
``?``                   ``?``            72   12–2–8
``.``                   ``.``            73   12–3–8
``⌑``       ``)``       ``)``            74   12–4–8  Lozenge
``[``                   ``[``            75   12–5–8
``<``                   ``<``            76   12–3–8
``⧻*``                  ``|``            77   12–7–8  Group mark
==========  ==========  ===============  ===  ======  ============
